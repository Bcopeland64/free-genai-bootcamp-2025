[
  {
    "id": "arrays_1",
    "topic_id": "arrays",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "difficulty": "easy",
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]"
      }
    ],
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "hints": [
      "Have you considered using a hash table to store values you've seen so far?",
      "For each number, check if the complement (target - number) exists in the hash table.",
      "This allows finding the complement in O(1) time, resulting in an O(n) solution."
    ],
    "solution": "def solution(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return [seen[complement], i]\n        seen[num] = i\n    return []",
    "test_cases": [
      {
        "input": "[2, 7, 11, 15], 9",
        "expected": "[0, 1]"
      },
      {
        "input": "[3, 2, 4], 6",
        "expected": "[1, 2]"
      },
      {
        "input": "[3, 3], 6",
        "expected": "[0, 1]"
      }
    ]
  },
  {
    "id": "arrays_2",
    "topic_id": "arrays",
    "title": "Maximum Subarray",
    "description": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array.",
    "difficulty": "medium",
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1"
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23"
      }
    ],
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "hints": [
      "Consider using the Kadane's algorithm, which is a form of dynamic programming.",
      "Keep track of the current sum and the maximum sum you've seen so far.",
      "If current sum becomes negative, reset it to zero as starting a new subarray would be more beneficial."
    ],
    "solution": "def solution(nums):\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
    "test_cases": [
      {
        "input": "[-2,1,-3,4,-1,2,1,-5,4]",
        "expected": "6"
      },
      {
        "input": "[1]",
        "expected": "1"
      },
      {
        "input": "[5,4,-1,7,8]",
        "expected": "23"
      }
    ]
  },
  {
    "id": "linked_lists_1",
    "topic_id": "linked_lists",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list. The linked list is represented as a sequence of nodes, where each node has a value and a pointer to the next node.",
    "difficulty": "easy",
    "examples": [
      {
        "input": "1->2->3->4->5",
        "output": "5->4->3->2->1"
      },
      {
        "input": "1->2",
        "output": "2->1"
      },
      {
        "input": "",
        "output": ""
      }
    ],
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000]",
      "-5000 <= Node.val <= 5000"
    ],
    "hints": [
      "Think about iterating through the linked list and changing the next pointers.",
      "You'll need to keep track of the previous node to reverse the direction.",
      "Be careful about the edge cases, like an empty list or a list with a single node."
    ],
    "solution": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef solution(head):\n    prev = None\n    current = head\n    \n    while current:\n        next_temp = current.next\n        current.next = prev\n        prev = current\n        current = next_temp\n    \n    return prev",
    "test_cases": [
      {
        "input": "1->2->3->4->5",
        "expected": "5->4->3->2->1"
      },
      {
        "input": "1->2",
        "expected": "2->1"
      },
      {
        "input": "",
        "expected": ""
      }
    ]
  },
  {
    "id": "stacks_1",
    "topic_id": "stacks",
    "title": "Valid Parentheses",
    "description": "Given a string `s` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1) Open brackets must be closed by the same type of brackets. 2) Open brackets must be closed in the correct order. 3) Every close bracket has a corresponding open bracket of the same type.",
    "difficulty": "easy",
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true"
      },
      {
        "input": "s = \"()[]{}\"",
        "output": "true"
      },
      {
        "input": "s = \"(]\"",
        "output": "false"
      }
    ],
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only '()[]{}'."
    ],
    "hints": [
      "A stack is the perfect data structure for this problem.",
      "Push opening brackets onto the stack and check each closing bracket against the top of the stack.",
      "If they match, pop the opening bracket from the stack. If not, the string is invalid."
    ],
    "solution": "def solution(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping:  # closing bracket\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:  # opening bracket\n            stack.append(char)\n    \n    return len(stack) == 0",
    "test_cases": [
      {
        "input": "\"()\"",
        "expected": "True"
      },
      {
        "input": "\"()[]{}\"",
        "expected": "True"
      },
      {
        "input": "\"(]\"",
        "expected": "False"
      },
      {
        "input": "\"([)]\"",
        "expected": "False"
      },
      {
        "input": "\"{[]}\"",
        "expected": "True"
      }
    ]
  }
]